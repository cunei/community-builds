// beware: this file contains heavy doses of magic
//
//
// This file implements the generation of a Scala compiler and related
// modules using a bootstrap process similar to the traditional cycle
// of starr/locker/quick, except that the process is adapted to the
// new modularized structure of the compiler and libraries.
// Hence, in each layer all of the modules are recompiled, as well as
// the compiler core and the core scala library. A full description
// follows below.


//
// Definitions that are used by all the projects in "common":
//
vars: {
  // "deps.inject" does not change the libraryDependencies. It only
  // informs dbuild about a dependency that, for whatever reason,
  // cannot be discovered automatically.
  // Due to the use of multiple spaces, we need to inject these
  // dependencies in all projects (dbuild will not be able to discover
  // transitive dependencies that live in different spaces).
  base: {
    deps.inject: [ "org.scala-lang.modules#scala-xml",
                   "org.scala-lang.modules#scala-parser-combinators" ]
    extra.options += "-XX:MaxPermSize=768m"
    extra.options += "-XX:PermSize=256m"
    extra.options += "-XX:MaxPermHeapExpansion=128m"
    extra.options += "-XX:MinPermHeapExpansion=8m"
  }
}


// Now, include the definitions of all the projects. Also pull in
// the variables that refer to the branches that are being tested.
include file("common-2.11.x.conf")

// Other definitions used during the bootstrap
vars: {
  // the "starr" version of Scala that will be used to compile
  // the target Scala version, initially. We also use versions
  // of the modules that are compatible with this starr core.
  verStarr:      "2.11.0-RC1"
  verStarrXml:   "1.0.0-RC7"
  verStarrParCo: "1.0.0-RC5"
  verStarrPart:  "1.0.0-RC8"
  verStarrSwing: "1.0.0-RC2"
  verStarrCont:  "1.0.0-RC3"
  verStarrCheck: "1.11.3"

  // we also use starr to extract dependencies
  extraction:    ${vars.verStarr}

  // target versions. They need to be constant across the bootstrapping process,
  // otherwise the "replacement" of artifacts while progressing from one layer
  // to the other won't work correctly. However, they can be anything.
  verScala: "2.11.4-test"   // scala core
  verXml:   "0.15.197-test" // scala-xml
  verParCo: "0.16.198-test" // scala-partest-combinators
  verSwing: "0.11.193-test" // scala-swing
  verCont:  "0.12.194-test" // scala-continuations
  verCheck: "0.13.195-test" // scalacheck
  verPart:  "0.14.196-test" // scala-partest

  scalaSwing: ${vars.base} {
    uri: "git://github.com/"${vars.scala-swing-ref}
    set-version: ${vars.verSwing}
  }
  scalaCont: ${vars.base} {
    uri: "git://github.com/"${vars.scala-continuations-ref}
    set-version: ${vars.verCont}
    // Trying to avoid unexplained error on Toolbox based tests: "bad option: -P:continuations:enable"
    // This is reproducible outside of dbuild, but hard to pin down.
    // Example: https://gist.github.com/retronym/9122414
    // Note the plugin JAR was rebuild on inspect `test:test`, even though there was no source change.
    // After that, the next `test` worked.
    extra.commands: ["clean", "plugin/compile:package"]
  }
  scalaCheck: ${vars.base} { // needed to compile scala-partest
    uri:    "git://github.com/"${vars.scalacheck-ref}
    extra.run-tests: false
    set-version: ${vars.verCheck}
  }
  scalaPart: ${vars.base} {
    uri: "git://github.com/"${vars.scala-partest-ref}
    set-version: ${vars.verPart}
  }
  scalaXml: ${vars.base} {
    uri: "git://github.com/"${vars.scala-xml-ref}
    set-version: ${vars.verXml}
  }
  scalaParCo: ${vars.base} {
    uri: "git://github.com/"${vars.scala-parser-combinators-ref}
    set-version: ${vars.verParCo}
  }
  starrModule: "git://github.com/scala/scala-"
  docsOff: {
    commands: [
      "set sources in doc in Compile := List()"
//    "set every logLevel := Level.Debug"
    ]
  }
  // used while building the Scala compiler that is directly built by starr
  scalaBuild: {
    cross-version: standard
    system: scala
    uri: "https://github.com/"${vars.scala-ref}
    extra.build-options: [ "-Dlocker.skip=1" ] // "-Dscalac.args.optimise=-optimise", "-debug" ]
    set-version: ${vars.verScala}
  }
  // used while building the Scala compiler in the subsequent stages
  scalaBuild2: ${vars.scalaBuild} {
    deps.inject: [ "org.scala-lang.plugins#scala-continuations-plugin",
                   "org.scala-lang.plugins#scala-continuations-library",
                   "org.scala-lang.modules#scala-swing",
                   "org.scala-lang.modules#scala-partest",
                   "org.scalacheck#scalacheck" ]
  }
}


//
// Time to bootstrap!
//
build: ${?build} [
{
  space.from: ""
  space.to: zero
  cross-version: full
  sbt-version: ${vars.sbt-version-override}
  projects: [
  {
    // Scalacheck is also needed to compile the core Scala compiler and library,
    // therefore we handle it as part of STARR, and also rebuild it multiple
    // times during the bootstrap.

    system: "assemble"
    name: "starr"
    extra.parts: {
      cross-version: standard
      sbt-version: ${vars.sbt-version-override}
      projects: [
      {
        system: "scala"
        name:  "starr-scala"
        set-version: ${vars.verScala}
        uri:    "git://github.com/scala/scala.git#v"${vars.verStarr}
        extra.build-options: [ "-Ddocs.skip=1","-Dlocker.skip=1" ]
      }
      ${vars.scalaXml}   { name: "starr-scala-xml"
        uri: ${vars.starrModule}"xml#v"${vars.verStarrXml}
      }
      ${vars.scalaParCo} { name: "starr-scala-pars-comb"
        uri: ${vars.starrModule}"parser-combinators#v"${vars.verStarrParCo}
      }
      ${vars.scalaPart}  { name: "starr-scala-partest"
        uri: ${vars.starrModule}"partest#"v${vars.verStarrPart}
      }
      ${vars.scalaCont}  { name: "starr-scala-continuations"
        uri: ${vars.starrModule}"continuations#v"${vars.verStarrCont}
      }
      ${vars.scalaSwing} { name: "starr-scala-swing"
        uri: ${vars.starrModule}"swing#v"${vars.verStarrSwing}
      }
      ${vars.scalaCheck} { name: "starr-scalacheck"
        uri: "git://github.com/rickynils/scalacheck.git#"${vars.verStarrCheck}
      }
    ]}
  }
  ]
}

// starr lives in the space "zero".

// Now, let's compile the core using starr. Then, we compile
// all the locker modules using this first compiler: this is
// done in order to make sure that all the requested versions
// of the modules (normally master) can indeed compile using
// only the new compiler, and nothing else from starr.

{
  space.from: zero
  space.to: [ second, third ]
  projects: [ ${vars.scalaBuild} {
    name: "init-scala"
    extra.build-options += "-Ddocs.skip=1"
  }
  ]
}

// This initial compiler is sufficient to compile many modules
// (sans docs), but its pom still refers to xml and parser
// combinators.
// In order to proceed, we create two dummy implementations
// for those two modules (which are never actually used), so
// that the dependencies of the core are satisfied.

{
  space.from: zero
  space.to: second
  sbt-version: ${vars.sbt-version-override}
  extraction-version: ${vars.extraction}
  cross-version: full
  projects: [
     // To make sure that the compiler does not use xml or parser combinators,
     // despite having them as a dependency, we create dummy projects that generate
     // corresponding empty jars (their uri is "nil:", hence no source).
     {
       name: "dummy-xml"
       extra.commands: [ "set organization := \"org.scala-lang.modules\"", "set name := \"scala-xml\"" ]
       set-version: ${vars.verXml}
     }
     {
       name: "dummy-pars-comb"
       extra.commands: [ "set organization := \"org.scala-lang.modules\"", "set name := \"scala-parser-combinators\"" ]
       set-version: ${vars.verParCo}
     }
  ]
}

// The initial core and the two dummy modules have been published
// into the space "second". We can now compile the real versions of
// xml and parser combinators, as long as we never invoke scaladoc.
// That is accomplished with: "set sources in doc in Compile := List()"
// (here in vars.docsOff).

{
  space.from: second
  space.to: [ third, fourth ]
  sbt-version: ${vars.sbt-version-override}
  extraction-version: ${vars.extraction}
  cross-version: full
  projects: [
    ${vars.scalaXml} {
      name: "init-xml"
      extra: ${vars.docsOff}
    }
    ${vars.scalaParCo} {
      name: "init-pars-comb"
      extra: ${vars.docsOff}
    }
  ]
}

// The initial compiler and the two real modules have been published
// into space "third". We have enough pieces to compile four more
// modules, which brings us to a first full set of components.

{
  space.from: third
  space.to: [ third, fourth, default ]
  sbt-version: ${vars.sbt-version-override}
  extraction-version: ${vars.extraction}
  cross-version: full
  projects: [
    ${vars.scalaCheck} { name: "locker-scalacheck" }
    ${vars.scalaPart}  { name: "locker-partest" }
    ${vars.scalaCont}  { name: "locker-continuations" }
    ${vars.scalaSwing} { name: "locker-swing" }
  ]
}

// space "third" now contains these four "locker" modules,
// plus the initial core, xml, and parser combinators.
// We can use this set to compile our first locker compiler.

{
  space.from: third
  space.to: [ fourth, default ]
  projects: [ ${vars.scalaBuild2} {
    name: "locker-scala"
  }
  ]
}

//
// Notice that "init" was compiled using starr (old code),
// while "locker" is compiled using "init", therefore a
// more recent compiler. The classfiles of "init" and of
// "locker" will be therefore different.
//

// Space "fourth" now contains:
// - init-xml
// - init-pars-comb
// - locker
// - locker-scalacheck
// - locker-partest
// - locker-continuations
// - locker-swing
//
// We have not yet compiled xml and parser combinators
// with their docs. We can complete the locker set
// at this time.
//
{
  space.from: fourth
  space.to: default
  sbt-version: ${vars.sbt-version-override}
  extraction-version: ${vars.extraction}
  cross-version: full
  projects: [
    ${vars.scalaXml}   { name: "locker-xml" }
    ${vars.scalaParCo} { name: "locker-pars-comb" }
  ]
}

// At this point we fully completed the first stage of
// our bootstrap. The space "default" contains the locker
// compiler, and the six locker modules, all of which
// have been compiled using the new init compiler.
//
// We use locker to compile the remaining projects;
// since it is in the default space, all the other
// projects will use it automatically.
//

//
// Meanwhile, in order to verify stability, we proceed
// to a second stage of bootstrap using locker to build
// "quick", and finally we compare quick and locker.
//
{
  space.from: default
  space.to: quick
  sbt-version: ${vars.sbt-version-override}
  extraction-version: ${vars.extraction}
  cross-version: full
  projects: [
    ${vars.scalaCheck}  { name: "quick-scalacheck" }
    ${vars.scalaPart}   { name: "quick-partest" }
    ${vars.scalaCont}   { name: "quick-continuations" }
    ${vars.scalaSwing}  { name: "quick-swing" }
    ${vars.scalaXml}    { name: "quick-xml" }
    ${vars.scalaParCo}  { name: "quick-pars-comb" }
    ${vars.scalaBuild2} { name: "quick-scala" }
  ]
}
]

//
// Comparison of quick and locker.
// We have to exclude the html docs, since scaladoc does not
// generate documentation in a repeatable manner
// (see https://issues.scala-lang.org/browse/SI-8289)
//
options.compare: [{
  a   : [ "locker-scala" ]
  b   : [ "quick-scala" ]
  skip: [ "META-INF/MANIFEST.MF", "*.properties", "*.html" ]
 },{
  a   : [ "locker-pars-comb", "locker-xml" ]
  b   : [ "quick-pars-comb", "quick-xml" ]
  skip: [ "META-INF/MANIFEST.MF", "*.properties", "*.html" ]
 },{
  a   : [ "locker-partest", "locker-swing", "locker-continuations", "locker-scalacheck" ]
  b   : [ "quick-partest", "quick-swing", "quick-continuations", "quick-scalacheck" ]
  skip: [ "META-INF/MANIFEST.MF", "*.properties", "*.html" ]
 }
]
