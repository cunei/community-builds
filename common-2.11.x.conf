// Note: the Typesafe Config library is a bit picky with suffixes;
// the common files included via the "include" directive should
// have a ".conf" suffix.
//
// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
//
// If you use extra.options or commands in a project, or extend
// its "extra" description in other ways, please use the form:
//
//      extra.options += "opt1"
//      extra.options += "opt2"
//      extra.options += "opt3"
//      ...(one at a time)...
//
//  = or = the form:
//
//     extra: ${vars.base.extra} {
//       options += "opt1"
//       options += "opt2"
//       options += "opt3"
//      ...(one at a time)...
//     }
//
// so that any "extra" definitions that may come from vars.base are prepended.
// It is necessary to add the options one at a time due to a
// limitation of the Typesafe Config library.
//
///////////////////////////////////////////////////////////////////////

//
// This configuration file lists contain a set of projects
// and repositories, tracking the development of various community
// projects on top of a given (stable or release) Scala version.
//
// Its purpose is to allow developers to be informed whenever a change
// in one of the project breaks one or more other projects.
//
//
// This is the Typesafe development build file for the Scala 2.11.x branch.
// ------------------------------------------------------------------------
//
// This build file tracks the Scala 2.11.x branch, and is used
// to track the current development of Typesafe projects against
// (mostly) stable versions of their other required projects.
//
// Therefore:
// - Typesafe projects are either master or a development/unstable branch
// - the other projects are either from a stable release, a pre-release,
//   or a branch from a fork that is intended to stabilize the project.
//

// TODO: list the projects we're building, if not all of them
vars: {
  scala-ref                    : "scala/scala.git#2.11.x"
  scala-ref                    : ${?scala_ref}   // allow overriding scala-ref using the scala_ref environment variable

  // TODO: merge required changes upstream to get rid of our forks, maintaining our one won't scale
  browse-ref                   : "retronym/browse.git#topic/2.11-compat"
  // forked to make build dbuild friendly (only building lift-json)
  lift-framework-ref           : "adriaanm/framework.git#scala-2.11"
  // forked so I could remove problematic sbt plugins
  spray-ref                    : "gkossakowski/spray.git#1.3-scala-2.11"

  // only building project twirl-api, fixed sha from master branch that has Scala 2.11 compatiblity patches merged
  twirl-ref                    : "spray/twirl.git#102978cb508684aee0cfa09d71027965cdcd77b4"
  // fixed sha from master branch that has Scala 2.11 compatiblity patches merged
  spray-json-ref               : "spray/spray-json.git#ac9fd8990c2bb1b259c8f7f80934b188c0b5feaf"
  // fixed sha from 2.10.x branch that has Scala 2.11 compatiblity patches merged
  scala-io-ref                 : "jesseeichar/scala-io.git#7704ec7e0f20238376975f89f817dd0d81a4a5d0"
  // fixed sha from scala_2.10 branch that has Scala 2.11 compatiblity patches merged
  json4s-ref                   : "json4s/json4s.git#2de9633aae136a03f3f654db65e90c66d71826de"
  // fixed sha from master that has Scala 2.11 patches merged
  playframework-ref            : "playframework/playframework.git#3b63ece20430f202363dc025a36fd00ed5d0283f"
  // fixed sha from master that has Scala 2.11 patches merged
  parboiled-ref                : "sirthias/parboiled.git#c53e650212f222c9b1f75fa1ab13d7cab9db164e"
  // This pull request supports the fully-cross-versioned contunations plugin, shipped with 2.11+
  scala-arm-ref                : "jsuereth/scala-arm.git#pull/31/head"
  // fixed sha/tag (a compromise)
  slick-ref                    : "slick/slick.git#pull/686/head"
  genjavadoc-ref               : "typesafehub/genjavadoc.git#v0.5_2.11.0-M8"
  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time
  scala-stm-ref                : "nbronson/scala-stm.git#release-0.7"
  scalacheck-ref               : "rickynils/scalacheck.git#1.11.3"
  scalatest-ref                : "scalatest/scalatest.git#scala-2.11-M8"
  // zeromq-scala-binding's master includes this fix (and others), which break akka-zeromq (?):
  // https://github.com/valotrading/zeromq-scala-binding/commit/c2a8a87673a1a3468486d1af9a6460bfed25c7a2
  // therefore (which has a broken libdep of scalatest, however (cross full)):
  zeromq-scala-binding-ref     : "valotrading/zeromq-scala-binding.git#062e9438e322ec29d75b9649cb2aafa6ba3198a6"
  // fixed sha/tag (a compromise), the sha points at master that supports Scala 2.11
  spire-ref                    : "non/spire.git#3d2a41e91a1f6946fac63660f6157d4a6e4a281d"
  // latest commits in scala-2.11.x branch break spray, Miles has been pinged about it
  // TODO: add shapeless 1.2.4 to dbuild definition which should allow us to switch to
  // upstream version of spray that depends on shapeless 1.2.4
  shapeless-ref                : "milessabin/shapeless.git#6dd9ec22b68d6a911ad83d0a537bf2043b748fc2"

  // tracking upstream (the ideal)
  akka-ref                     : "akka/akka.git"
  async-ref                    : "scala/async.git"
  scala-continuations-ref      : "scala/scala-continuations.git"
  scala-parser-combinators-ref : "scala/scala-parser-combinators.git"
  scala-partest-interface-ref  : "scala/scala-partest-interface.git"
  scala-partest-ref            : "scala/scala-partest.git"
  scala-xml-ref                : "scala/scala-xml.git"
  scala-swing-ref              : "scala/scala-swing.git"
  specs2-ref                   : "etorreborre/specs2.git"
  zinc-ref                     : "typesafehub/zinc.git"
  sbinary-ref                  : "harrah/sbinary.git"
  sbt-full-library-ref         : "dragos/sbt-full-library.git"
  sbt-republish-ref            : "typesafehub/sbt-republish.git"
  sbt-ref                      : "sbt/sbt.git#0.13"
  scalaz-ref                   : "scalaz/scalaz.git#series/7.0.x"
  discipline-ref               : "typelevel/discipline.git#v0.2"

  // version settings
  sbt-version-override         : "0.13.5"
}

vars {
  scalac-opts                  : ""
  scalac-opts                  : ${?scalac_opts}   // allows additional compiler options using the scala_ref environment
}

// NB: vars.base and vars.base.extra need to be defined using +=, in order to include the
// definitions in community-2.xx.x.dbuild
vars.base.extra.commands += "set commands += {\n  def appendScalacOptions(s: State, args: Seq[String]): State = {\n    val extracted = Project extract s\n    def appendDistinct[A](x: Seq[A], y: Seq[A]) = x.filterNot(y.contains) ++ y\n    import extracted._\n    val r = Project.relation(extracted.structure, true)\n    val allDefs = r._1s.toSeq\n    val projectScope = Load.projectScope(currentRef)\n    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct\n    val redefined = scopes.map(scope => scalacOptions in scope <<= (scalacOptions in scope).map(orig => appendDistinct(orig, args)))\n    val session = extracted.session.appendRaw(redefined)\n    BuiltinCommands.reapply(session, structure, s)  \n  }\n  Command.args(\"appendScalacOptions\", \"<option>\")(appendScalacOptions)\n}"
vars.base.extra.commands += "appendScalacOptions "${vars.scalac-opts}

vars.ivyPat: ", [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  0: "local"
  1: "a7-maven: https://a7.typesafe.com:8082/artifactory/repo"
  2: "a7-ivy: https://a7.typesafe.com:8082/artifactory/repo"${vars.ivyPat}

//
// a7 is proxying:
//
// 01: "maven-central"
// 02: "sonatype-snapshots: https://oss.sonatype.org/content/repositories/snapshots"
// 03: "sonatype-releases: https://oss.sonatype.org/content/repositories/releases"
// 04: "java-annoying-cla-stuff: http://download.java.net/maven/2/"
// 05: "typesafe-releases: http://typesafe.artifactoryonline.com/typesafe/releases"
// 06: "typesafe-ivy-releases: http://typesafe.artifactoryonline.com/typesafe/ivy-releases"${vars.ivyPat}
// 07: "dbuild-snapshots: http://typesafe.artifactoryonline.com/typesafe/temp-distributed-build-snapshots"${vars.ivyPat}
// 08: "sbt-plugin-releases: http://scalasbt.artifactoryonline.com/scalasbt/sbt-plugin-releases"${vars.ivyPat}
// 09: "jgit-repo: http://download.eclipse.org/jgit/maven"
// 10: "spray-repo: http://repo.spray.io"
// 11: "sbt-plugin-releases-2: http://repo.scala-sbt.org/scalasbt/sbt-plugin-releases"${vars.ivyPat}
}

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: [ default, sbtplugins ]
  space.to: default
  extraction-version: "2.11.0-RC1"
  projects: [
  ${vars.base} {
    name: "parboiled",
    uri: "https://github.com/"${vars.parboiled-ref},
    extra: ${vars.base.extra} {
      projects: ["parboiled-scala"]
      sbt-version: ${vars.sbt-version-override}
      // tests do not compile due to source incompatible change in scalatest
      // TestNGSuite became a class but was a trait
      run-tests: false
    }
  }

  ${vars.base} {
    name: "json4s",
    uri: "https://github.com/"${vars.json4s-ref}
    extra.projects: ["json4s-native", "json4s-jackson"]
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "lift-json",
    uri: "https://github.com/"${vars.lift-framework-ref}
    extra.projects: ["lift-json"]
    extra.sbt-version: ${vars.sbt-version-override}
    // test failure:
    //[info] [info] ! Either can't be deserialized with type hints
    //[info] [error]  ClassNotFoundException: : scala.util.Left  (Formats.scala:223)
    // !!!: probably we should investigate
    extra.run-tests: false
  }

  ${vars.base} {
    name: "spray-twirl",
    uri: "https://github.com/"${vars.twirl-ref}
    extra.projects: ["twirl-api"]
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "spray-json",
    uri: "https://github.com/"${vars.spray-json-ref},
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "spray",
    uri: "https://github.com/"${vars.spray-ref},
    extra: ${vars.base.extra} {
      sbt-version: ${vars.sbt-version-override}
      // disable running sphinx, it would be great if dbuild
      // oferred a mechanism for excluding particular project (e.g. docs)
      commands += "set SphinxSupport.sphinxCompile in docs := Seq.empty"
      // they fail to compile
      run-tests: false
    }
  }


  ${vars.base} {
    name: "Play2-core",
    uri: "https://github.com/"${vars.playframework-ref},
    extra: ${vars.base.extra} {
      projects: ["Play"]
      directory: "framework"
      run-tests: false
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
      commands += "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
    }
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "scala-io"
    uri: "https://github.com/"${vars.scala-io-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra: ${vars.base.extra} {
      projects: ["core", "file"]
      // one of the tests fail for some reason
      run-tests: false
    }
  }

  ${vars.base} {
    name: "scala-arm"
    uri: "https://github.com/"${vars.scala-arm-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }  

  ${vars.base} {
    name: "scala-partest-interface",
    uri: "https://github.com/"${vars.scala-partest-interface-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  //
  // Community projects (not from Typesafe), and other support libraries:
  // these should be stable releases, pre-releases, or branches aimed
  // at stabilizing those projects when used in conjunction with this Scala version.
  //
  ${vars.base} {
    name: scala-stm
    uri:    "https://github.com/"${vars.scala-stm-ref}
    // a minor incompatibility with recent versions of scalatest, therefore:
    extra.run-tests: false
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: shapeless
    uri:    "https://github.com/"${vars.shapeless-ref}
    extra.sbt-version: ${vars.sbt-version-override}

  }

  ${vars.base} {
    name: specs2
    uri: "https://github.com/"${vars.specs2-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra.run-tests: false // at least SnippetsTest is failing.
  }

  ${vars.base} {
    name: sbinary
    uri:    "https://github.com/"${vars.sbinary-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: scalaz
    uri: "https://github.com/"${vars.scalaz-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "zeromq-scala-binding"
    uri: "https://github.com/"${vars.zeromq-scala-binding-ref}
    extra: ${vars.base.extra} { run-tests: false }
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "scalatest"
    uri: "https://github.com/"${vars.scalatest-ref}
    extra: ${vars.base.extra} {
      projects: ["scalatest"]
      commands += "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
      run-tests: false
      sbt-version: ${vars.sbt-version-override}
    }
  }

  ${vars.base} {
    name: "discipline"
    uri: "https://github.com/"${vars.discipline-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name: "spire"
    uri: "https://github.com/"${vars.spire-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    // tests crash with:
    // [info] [error] Could not run test spire.laws.LawTests:
    // java.lang.ClassFormatError: Duplicate method name&signature in class file spire/std/OrderProductInstances$$anon$228
    extra.run-tests: false
  }

  ${vars.base} {
    name:   "genjavadoc-plugin",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra.projects: genjavadoc-plugin
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name:   "genjavadoc",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra: ${vars.base.extra} {
      sbt-version: ${vars.sbt-version-override}
      projects: ["tests","javaOut"]
      run-tests: false
    }
  }

  ${vars.base} {
    name:"akka"
    uri:    "https://github.com/"${vars.akka-ref}
    extra: ${vars.base.extra} {
      options += "-Dakka.genjavadoc.enabled=true"
      options += "-Dakka.scaladoc.diagrams=false"
      projects: ["akka-scala-nightly"]
      run-tests: false
    }
    extra.sbt-version: ${vars.sbt-version-override}
  }

  //
  // Typesafe-developed projects: degvelopment branches / master / unstable releases
  //
  ${vars.base} {
    name: "async"
    uri: "https://github.com/"${vars.async-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra.run-tests: false // ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
  }

  ${vars.base} {
    name: "slick"
    uri:  "https://github.com/"${vars.slick-ref}
    extra.sbt-version: ${vars.sbt-version-override}
  }

  ${vars.base} {
    name:   "browse",
    uri:    "https://github.com/"${vars.browse-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra.commands += "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
    extra.exclude: ["test", "testLink"]
  }

  ${vars.base} {
    name:   "sbt",
    uri:    "https://github.com/"${vars.sbt-ref}
    extra.sbt-version: ${vars.sbt-version-override}
    extra: ${vars.base.extra} {
      run-tests: false
      exclude: ["root","launch-test"]
    }
  }

  ${vars.base} {
    name: "scoverage"
    uri:  "https://github.com/scoverage/scalac-scoverage-plugin.git"
    extra: ${vars.base.extra} {
      sbt-version: ${vars.sbt-version-override}
      run-tests: false // [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }

// scala-logging-slf4j is used by scoverage, but:
// - scala-logging-slf4j v2.1.2 won't compile (not found: value LoggerMacro)
// - and v3.0.0 changed the artifacts, so we grab v2.1.2 via Ivy instead.
//  ${vars.base} {
//    name: "scala-logging"
//    uri:  "https://github.com/typesafehub/scala-logging.git#v2.1.2"
//    extra: ${vars.base.extra} {
//      sbt-version: ${vars.sbt-version-override}
//    }
//  }

  {
    name:   "scala-logging-slf4j"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-slf4j_2.11;2.1.2"
  }

  {
    name:   "scala-logging-api"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-api_2.11;2.1.2"
  }

  ${vars.base} {
    name:   "zinc",
    uri:    "https://github.com/"${vars.zinc-ref}
    extra.sbt-version: "0.12.5-dbuild"
    space: default // We don't compile plugins, for 0.12/2.9.x
  }

  ${vars.base} {
    name:   "sbt-full-library",
    uri:    "https://github.com/"${vars.sbt-full-library-ref}
    extra.sbt-version: "0.12.5-dbuild"
    space: default // We don't compile plugins, for 0.12/2.9.x
  }

  ${vars.base} {
    name:   "sbt-republish",
    uri:    "http://github.com/"${vars.sbt-republish-ref}
    extra.sbt-version: "0.12.5-dbuild"
    space: default // We don't compile plugins, for 0.12/2.9.x
  }
]
}


// play-related sbt plugins, in a separate space
build += {

  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: [ sbtplugins, sbtplugins ]
  space.to: sbtplugins
  sbt-version: ${vars.sbt-version-override}
  extraction-version: "2.10.4"

projects:[
{
  name:   scala-210
  system: scala
  uri:    "git://github.com/scala/scala.git#2.10.x"
}
{
  name:   genjavadoc-210
  uri:    "git://github.com/typesafehub/genjavadoc.git#2.10.x"
  extra: {
    projects: genjavadoc-plugin
  }
}
{
  name: spray-json-210
  uri: "git://github.com/spray/spray-json.git"
}
// compiling spray from source entails a few problems,
// so I am grabbing existing artifacts via Ivy, for now.
{
  name: spray-client
  system: ivy
  uri:    "ivy:io.spray#spray-client;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-io
  system: ivy
  uri:    "ivy:io.spray#spray-io;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-util
  system: ivy
  uri:    "ivy:io.spray#spray-util;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-http
  system: ivy
  uri:    "ivy:io.spray#spray-http;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-httpx
  system: ivy
  uri:    "ivy:io.spray#spray-httpx;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name: spray-can
  system: ivy
  uri:    "ivy:io.spray#spray-can;1.3.1"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}

{
  name:   paradise-210
  // macro-paradise is used by SPECS2-2.2.2
  //
  uri: "git://github.com/scalamacros/paradise.git#2.10.x"
}
{
  name: parboiled-210
  system: ivy
  uri:    "ivy:org.parboiled#parboiled-scala_2.10;1.1.6"
  extra: {
    main-jar: true
    artifacts: [{type: bundle}]
  }
}
{
  name:  akka-libs-210
  uri:    "git://github.com/akka/akka.git"
  extra: {
  projects: [akka-actor,akka-contrib,akka-osgi]
  options: ["-Dakka.genjavadoc.enabled=true"]
  // one test failing?!?
  run-tests: false
  }
}
{
    name:   "specs2-210",
    uri: "git://github.com/etorreborre/specs2.git#SPECS2-2.3.12"
    // one test is currently failing
    extra.run-tests: false
}
{
    name:   "shapeless-210"
    uri:    "git://github.com/milessabin/shapeless.git#shapeless-2.0.0-scala-2.10.x"
}
{
    name: scalatest-210

    // This was an older version known to compile with the tip of 2.10.x
    uri: "git://github.com/cunei/scalatest.git"
    // uri: "git://github.com/scalatest/scalatest.git"
    extra: {
      projects: scalatest
      run-tests: false
    }
}
{
    name:   scalaz-210
    uri:    "git://github.com/scalaz/scalaz.git#series/7.0.x"
    extra.exclude: tests
}
{
    name:   scalacheck-210
    // patched
    uri:    "git://github.com/cunei/scalacheck.git"
    // no:
    // uri:    "git://github.com/rickynils/scalacheck.git#1.11.4"
}
{
  name: sbt-web
  uri:  "https://github.com/sbt/sbt-web.git"
}
{
  name: js-engine
  uri:  "https://github.com/typesafehub/js-engine.git"
}
{
  name: npm
  uri:  "https://github.com/typesafehub/npm.git"
    extra.run-tests: false
}
{
  name: webdriver
  uri:  "https://github.com/typesafehub/webdriver.git"
}
{
  name: sbt-js-engine
  uri:  "https://github.com/sbt/sbt-js-engine.git"
}
{
  name: sbt-webdriver
  uri:  "https://github.com/sbt/sbt-webdriver.git"
}
{
  name: sbt-coffeescript
  uri:  "https://github.com/sbt/sbt-coffeescript.git"
}
{
  name: sbt-digest
  uri:  "https://github.com/sbt/sbt-digest.git"
}
{
  name: sbt-gzip
  uri:  "https://github.com/sbt/sbt-gzip.git"
}
{
  name: sbt-jshint
  uri:  "https://github.com/sbt/sbt-jshint.git"
}
{
  name: sbt-less
  uri:  "https://github.com/sbt/sbt-less.git"
}
{
  name: sbt-mocha
  uri:  "https://github.com/sbt/sbt-mocha.git"
}
{
  name: sbt-rjs
  uri:  "https://github.com/sbt/sbt-rjs.git"
}
{
  name: sbteclipse
  uri: "git://github.com/typesafehub/sbteclipse.git"
}
{
  name: sbt-twirl-210
// no: uri: "git://github.com/spray/twirl.git"
// yes, SBT-Plugin uses this:
  uri: "git://github.com/playframework/twirl.git"
  // The code makes assumptions on the scalaBinaryVersion, and
  // will not compiler unless it is set to "2.10". Hence:
  cross-version: standard
}

{
  name: sbt-idea
  uri: "https://github.com/mpeltonen/sbt-idea.git#1.6.0_sbt-0.13"
  extra.sbt-version: "0.12.5-dbuild"
  space: sbtplugins // plugins not compiled for 2.9.x
  extra.commands: "set sources in doc in Compile := List()" // skip scaladoc, as it fails
}
{
  name: android-sdk-plugin
  uri: "https://github.com/pfn/android-sdk-plugin.git#16146db192b2302369cc54289195fe9bb19119ca"
  extra.sbt-version: "0.12.5-dbuild"
  space: sbtplugins // plugins not compiled for 2.9.x
}
{
  name: sbt-android
  uri : "https://github.com/jberkel/android-plugin.git#2a2a170a9a3db194a09962b6308022a94359704b"
  extra.sbt-version: "0.12.5-dbuild"
  space: sbtplugins // plugins not compiled for 2.9.x
  extra.commands: """ set scalacOptions := Seq("-unchecked", "-deprecation", "-Xcheckinit")"""
}
// and, finally, SBT-Plugin from Play, which according to Christopher Hunt
// should use sbt-js-engine and sbt-webdriver

{
    check-missing: false
    // this plugin needs sbt-idea, which needs android-sdk-plugin, which is apparently impossible to compile
    name: Play2-SBT-Plugin
    uri: "https://github.com/playframework/playframework.git#2.3.x"
    extra: {
      projects: SBT-Plugin
      directory: framework
      run-tests: false
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
      commands += "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
    }
}

{
  name: sbt-pgp
  uri: "git://github.com/sbt/sbt-pgp.git"
}
{
  name: dispatch-http-210
  system: ivy
  uri: "ivy:net.databinder#dispatch-http_2.10;0.8.10"
}
{
  name: dispatch-core-210
  system: ivy
  uri: "ivy:net.databinder#dispatch-core_2.10;0.8.10"
}
{
  name: dispatch-futures-210
  system: ivy
  uri: "ivy:net.databinder#dispatch-futures_2.10;0.8.10"
}


//https://github.com/dispatch/reboot
{
  name: dispatch-new-json4s-native-210
  system: ivy
  uri: "ivy:net.databinder.dispatch#dispatch-json4s-native_2.10;0.11.1"
}
{
  name: dispatch-new-core-210
  system: ivy
  uri: "ivy:net.databinder.dispatch#dispatch-core_2.10;0.11.1"
}



// Some of the projects below are disabled as they are part of cycles.
// It may be possible to untangle some of them by specify a different
// "from" spaces for their plugins, as in space.from: [ sbtplugins, "" ]

{
  name: sbt-assembly
  uri: "git://github.com/sbt/sbt-assembly.git"
}
{
  name: sbt-buildinfo
  uri: "git://github.com/sbt/sbt-buildinfo.git"
}
{
  name: sbt-unidoc
  uri: "git://github.com/sbt/sbt-unidoc.git"
}
{
  name: sbt-updates
  uri: "git://github.com/rtimush/sbt-updates.git"
}

{
  name: sbt-ghpages
  uri: "git://github.com/sbt/sbt-ghpages.git"
}
{
  name: sbt-git
  uri: "git://github.com/sbt/sbt-git.git"
}
{
  name: sbt-multijvm
  uri: "git://github.com/typesafehub/sbt-multi-jvm.git"
}
{
  name: sbt-native-packager
  uri: "git://github.com/sbt/sbt-native-packager.git"
}

{
  name: sbt-s3
  uri: "git://github.com/sbt/sbt-s3.git"
}
{
  name: sbt-scalariform
  uri: "git://github.com/sbt/sbt-scalariform.git"
}
{
  name: scalariform-210
  uri: "git://github.com/mdr/scalariform.git"
  extra.sbt-version: "0.12.5-dbuild"
  space: sbtplugins // use "" for plugins, hence don't rewire. Otherwise:
//[error] These items are part of cycles, and are all reachable from each other:
//[error]    Project "scalariform-210" uses com.typesafe.sbteclipse:sbteclipse-plugin:jar (build level 1, space "sbtplugins"), which is provided by: "sbteclipse".
//[error]    Project "scalariform-210" uses com.typesafe.sbt:sbt-scalariform:jar (build level 1, space "sbtplugins"), which is provided by: "sbt-scalariform".
//[error]    Project "sbt-scalariform" uses org.scalariform:scalariform:jar (build level 0, space "sbtplugins"), which is provided by: "scalariform-210".
//[error]    Project "sbteclipse" uses com.typesafe.sbt:sbt-scalariform:jar (build level 1, space "sbtplugins"), which is provided by: "sbt-scalariform".
}
{
  name: sbt-start-script
  uri: "git://github.com/sbt/sbt-start-script.git"
}
{
  name: sbt-scala-modules
  uri: "git://github.com/scala/sbt-scala-modules.git"
}
{
  name: sbt-scoverage
  uri: "git://github.com/scoverage/sbt-scoverage.git"
}
  ${vars.base} {
    name: "scoverage-210"
    uri:  "https://github.com/scoverage/scalac-scoverage-plugin.git"
    extra: ${vars.base.extra} {
      run-tests: false // [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }
{
  name: sbt-sonatype
  uri: "git://github.com/xerial/sbt-sonatype.git"
}


{
  name: sbt-ls
  uri: "git://github.com/softprops/ls.git"
  extra.sbt-version: "0.12.5-dbuild"
  space: sbtplugins // plugins not compiled for 2.9.x
}
{
  name: sbt-cross-building
  uri: "git://github.com/jrudolph/sbt-cross-building.git"
  extra.sbt-version: "0.12.5-dbuild"
  space: sbtplugins // plugins not compiled for 2.9.x
}

{
  name: json4s-210
  uri: "git://github.com/json4s/json4s.git"
}

//
// sbt-site:
// 1) uses itself
// 2) its build file cannot parse Scala version numbers like "2.10.5-dbuildx51736571731fa46343587c9188a4220f699afa4c"
//{
//  space: sbtplugins
//  name: sbt-site
//  uri: "git://github.com/sbt/sbt-site.git"
//}


// Cycle involving sbt-release:
//
//[error]    Project "sbt-cross-building" uses org.specs2:specs2:jar, which is provided by: "specs2-210".
//[error]    Project "specs2-210" uses com.github.gseitz:sbt-release:jar, which is provided by: "sbt-release".
//[error]    Project "sbt-release" uses net.virtual-void:sbt-cross-building:jar, which is provided by: "sbt-cross-building".
//{
//  name: sbt-release
//  uri: "git://github.com/sbt/sbt-release.git"
//}

// Cycle involving mima:
//
//[error]    Project "scalacheck-210" uses com.typesafe:sbt-mima-plugin:jar, which is provided by: "sbt-mima-plugin".
//[error]    Project "sbt-mima-plugin" uses org.specs2:specs2:jar, which is provided by: "specs2-210".
//[error]    Project "specs2-210" uses org.scalacheck:scalacheck:jar, which is provided by: "scalacheck-210".
//{
//  name: sbt-mima-plugin
//  uri: "git://github.com/typesafehub/migration-manager.git"
//}

// Cycle involving sbt-osgi:
//
//[error]    Project "sbt-osgi" uses org.specs2:specs2:jar, which is provided by: "specs2-210".
//[error]    Project "specs2-210" uses com.chuusai:shapeless:jar, which is provided by: "shapeless-210".
//[error]    Project "shapeless-210" uses com.typesafe.sbt:sbt-osgi:jar, which is provided by: "sbt-osgi".
//(and others)
//{
//  name: sbt-osgi
//  uri: "git://github.com/sbt/sbt-osgi.git"
//}

// cannot extract
//{
//  name: sbt-boilerplate
//  uri: "git://github.com/sbt/sbt-boilerplate.git"
//  extra.sbt-version: "0.12.5-dbuild"
//  space: sbtplugins // plugins not compiled for 2.9.x
//}


]}

